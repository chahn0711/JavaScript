// 함수 선언문 : function 키워드로 생성, 호이스팅에 영향 받음, 호출해야 실행 됨(한번 만들면 재사용 용이)
// let test = 10000; // 위치 성립 O
// console.log(sum(10, 20));
// console.log(sum(100, 200));
// let test = 10000; 끌어올림 일어나서 위치 성립 X 결과 값이 달라질 수 있어 불가(전역 변수 사용하지 말라는 이유이기도 함)

// function sum(p1, p2) {
//     return test + p1 + p2;
// }

// 함수표현식 : 변수에 함수를 할당해서 사용하는 방식, 호이스팅 적용 되지 않음, 네이밍함수와 익명의 함수로 만들 수 있음

// const gugudan = function(dan) { // 익명 함수 예시
//     for(let i = 1; i < 10; i++) {
//         console.log(`${dan} * ${i} = ${dan * i}`);
//     }
// }ㅣ
// gugudan(5);
// gugudan(9); // 위로 가면(const 위) 호이스팅 X 위에 쓰게 되면 오류 남

/* -------------------------------------------------------------------------------------*/

// 화살표 함수 (=>) : ES6에서 추가된 새로운 함수 선언 방법, 함수 선언식 보다 간결하고 가독성이 좋아 많이 사용 됨
// const gugudan = (dan) => {
//     for(let i = 1; i < 10; i++) {
//         console.log(`${dan} * ${i} = ${dan * i}`);
//     }
// }
// gugudan(5);
// gugudan(9);

// 기본값 할당 : 화살표 함수의 익명 함수??
// const sum = (num1, num2 = 100) => num1 + num2; // 생략 가능 
// console.log(sum(10)); // 10 undefined (자바 스크립트에서는 매개변수의 수만큼 인수를 전달하지 않아도 오류 발생하지 않음 [자바랑 차이점])

/* -------------------------------------------------------------------------------------*/

// 스코프란? 변수가 생성되고 소멸되는 영역, 영향을 미치는 범위

//let a = 10; // 전역 스코프 예시(비추, 매개변수로 바꿔서 짜야 오류가 날 확률을 줄여줌)
// function sum() { // 함수 선언식
    
//     let a = 10; // 지역스코프이자 블록 스코프
//     // 에러나나 자바스크립트는 에러를 못찾아 주기 때문에 주의(아래의 있는 함수 외부의 a의 값을 알 수 없기 때문)
    
//     console.log(`함수 내부 : ${a}`);
    
// } 
// sum();
// console.log(`함수 외부 : ${a}`);

// var을 let으로 바꾸면 X : 블록 스코프는 블록을 만나면 사라지는데 {} 안에서 이용되고 사라져서 외부의 b에 쓰일 수가 없다?
// var a = 10;
// {
//     var b = 20;
//     console.log(`코드 블록 내부 a: ${a} `);
//     console.log(`코드 블록 내부 b: ${b} `);
// }
// console.log(`코드 블록 외부 a: ${a} `);
// console.log(`코드 블록 외부 b: ${b} `);
/* -------------------------------------------------------------------------------------*/

// 참조 우선순위

// 블록스코프 : 지역 변수가 우선 예시
// let a = 10;
// const b = 20;
// function sum() { // 블록 스코프기 때문에 중복선언 아니기 때문에 동작 가능(블록 스코프는 블록 내에서 사용 후 소멸)*자바에서는 오류로 잡을 수도 있음*
//     let a = 50;
//     const b = 70;
//     console.log(`함수 내부 a : ${a}`);
//     console.log(`함수 내부 b : ${b}`);
// }
// sum();

// let a = 10;
// let b = 20;
// {
//     let a = 30;
//     let b = 40;
//     console.log(`함수 내부 a : ${a}`);
//     console.log(`함수 내부 b : ${b}`);
// }

// 즉시 실행 함수: 함수를 정의하자마자 바로 실행되는 함수
// function을 꺼내면 되지 않냐 필요한 이유: 밖으로 꺼내면 전역 변수가 되어 다른 곳에 영향을 줄 수 있기 때문  
// function은 불러야 작동이 됨->바로 실행이 되어야 하는 상황->즉시 사용이 되기 위해서는 밖으로 꺼내야 함->그럼 다른 곳에 영향을 줌(문제 야기)-> 다른 곳에 영향 안주고 즉시 실행되야 하기 때문에 즉시 실행 함수를 필요로함 
// (function(){
//     init();
// })();
// function init(){
//     console.log("초기화 루틴을 수행 합니다.");
//     let defaultUrl = "127.0.0.1";
//     let defaultPort = "3030";

// }






/* -------------------------------------------------------------------------------------*/
